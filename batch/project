#!/usr/bin/env python

import argparse
import subprocess


class Project:
    @staticmethod
    def run(args):
        subprocess.run(["python", "main.py"], check=True, shell=True)

    @staticmethod
    def build(args):
        subprocess.run(["pyinstaller", "main.py"], check=True, shell=True)

    @staticmethod
    def qt(args):
        from os.path import basename
        from glob import glob

        match args.type:
            case "uic":
                # Convert the Qt designer files
                for source in glob("resources/*.ui"):
                    filename = basename(source).replace(".ui", ".py")
                    target = f"app/Ui/Ui_{filename}"
                    subprocess.run(
                        ["pyside6-uic", source, "-o", target], check=True, shell=True
                    )
                    print(f"Converted {source} to {target}")
            case "rcc":
                # Convert the Qt resource files
                for source in glob("resources/*.qrc"):
                    filename = basename(source).replace(".qrc", ".py")
                    target = f"app/Ui/RC_{filename}"
                    subprocess.run(
                        ["pyside6-rcc", source, "-o", target], check=True, shell=True
                    )
                    print(f"Converted {source} to {target}")
            case "all":
                for t in ["uic", "rcc"]:
                    Project.qt(argparse.Namespace(type=t))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="A simple command-line tool for python projects."
    )
    subparsers = parser.add_subparsers()

    # Define the 'run' command
    run_parser = subparsers.add_parser("run", help="Run the application")
    run_parser.set_defaults(func=Project.run)

    # Define the 'build' command
    build_parser = subparsers.add_parser("build", help="Build the application")
    build_parser.set_defaults(func=Project.build)

    # Define the 'qt' command
    qt_parser = subparsers.add_parser("qt", help="Generate Qt files")
    qt_parser.add_argument(
        "type",
        type=str,
        help="The type of file to generate",
        choices=["uic", "rcc", "all"],
    )
    qt_parser.set_defaults(func=Project.qt)

    # Parse the arguments
    args = parser.parse_args()
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()
